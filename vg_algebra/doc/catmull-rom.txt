catmull rom spline:

alpha = [0..1]

centripetal => alpha = 0.5
uniform     => alpha = 0
chordal     => alpha = 1

i     = 0,1,2,3
t_0   = 0
p_i   = (x_i,y_i)         => point
C     = {p_0, p_1, p_2, p_3} => spline segment

t_(i + 1) = sqrt((x_(i+1) - x_i)^2 + (y_(i+1) - y_i)^2)^alpha + t_i

q(t) = B1 * (t2 - t)/(t2 - t1) + B2 * (t - t1)/(t2 - t1)

A1       = p0 * (t1 - t)/(t1 - t0) + p1 * (t - t0)/(t1 - t0)
A2       = p1 * (t2 - t)/(t2 - t1) + p2 * (t - t1)/(t2 - t1)
A3       = p2 * (t3 - t)/(t3 - t2) + p3 * (t - t2)/(t3 - t2)
B1       = A1 * (t2 - t)/(t2 - t0) + A2 * (t - t0)/(t2 - t0)
B2       = A2 * (t3 - t)/(t3 - t1) + A3 * (t - t1)/(t3 - t1)

The actual segment is between t1 and t2: q(t1) = p1, q(t2) = p2.

**********************************************************************

float t01 = pow(distance(p0, p1), alpha);
float t12 = pow(distance(p1, p2), alpha);
float t23 = pow(distance(p2, p3), alpha);

/* m1, m2 are derivatives in p1, p2 */
vec2 m1 = (1.0f - tension) * (p2 - p1 + t12 * ((p1 - p0) / t01 - (p2 - p0) / (t01 + t12)));
vec2 m2 = (1.0f - tension) * (p2 - p1 + t12 * ((p3 - p2) / t23 - (p3 - p1) / (t12 + t23)));

vec2 a =  2.0f * (p1 - p2) + m1 + m2;
vec2 b = -3.0f * (p1 - p2) - m1 - m1 - m2;
vec2 c =  m1;
vec2 d =  p1;

/* point on {p1,p2} */
vec2 point = a * (t * t * t) + b * (t * t) + c * t + d;

/* convert to cubic Bezier {q0,q1,q2,q3} */
q0 = p1;
q1 = p1 + m1 / 3;
q2 = p2 - m2 / 3;
q3 = p2;